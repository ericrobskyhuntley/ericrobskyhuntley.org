# Generated by Django 3.1.7 on 2021-03-19 23:11

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import markdownx.models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('blog', '0041_auto_20210319_1450'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='person',
            name='desc',
        ),
        migrations.AddField(
            model_name='affiliation',
            name='email',
            field=models.EmailField(blank=True, default='', help_text='Email associated with a given affiliation.', max_length=254),
        ),
        migrations.AddField(
            model_name='person',
            name='bio',
            field=markdownx.models.MarkdownxField(blank=True, help_text="Person's short biography."),
        ),
        migrations.AlterField(
            model_name='committee_membership',
            name='chair',
            field=models.BooleanField(default=False, help_text='Designates chair/non-chair of the degree committee.'),
        ),
        migrations.AlterField(
            model_name='committee_membership',
            name='education',
            field=models.ForeignKey(help_text='Period of education guided by the degree committee.', on_delete=django.db.models.deletion.CASCADE, to='blog.education'),
        ),
        migrations.AlterField(
            model_name='committee_membership',
            name='person',
            field=models.ForeignKey(help_text='Person related to the degree committee.', on_delete=django.db.models.deletion.CASCADE, to='blog.person'),
        ),
        migrations.AlterField(
            model_name='education',
            name='committee',
            field=models.ManyToManyField(help_text='Lists committee members for degree-granting process.', through='blog.Committee_Membership', to='blog.Person'),
        ),
        migrations.AlterField(
            model_name='education',
            name='concentration',
            field=models.CharField(blank=True, help_text='Major, concentration, etc.', max_length=150),
        ),
        migrations.AlterField(
            model_name='education',
            name='degree',
            field=models.CharField(blank=True, choices=[('MCP', 'M. City Planning'), ('PhD', 'Ph.D.'), ('MUP', 'M. Urban Planning'), ('MURP', 'M. Urban and Regional Planning'), ('MFA', 'M. Fine Arts'), ('MLA', 'M. Landscape Architecture'), ('MArch', 'M. Architecture'), ('MBA', 'M. Business Administration'), ('MPA', 'M. Public Administration'), ('MDes', 'M. Design Studies'), ('DDes', 'D.Des.'), ('BFA', 'B. Fine Arts'), ('BA', 'B. Arts'), ('BS', 'B. Science'), ('GC', 'Graduate Certificate'), ('UC', 'Undergraduate Certificate'), ('', 'None')], default='', help_text='What type of degree was awarded/is the anticipated result?', max_length=5),
        ),
        migrations.AlterField(
            model_name='education',
            name='desc',
            field=markdownx.models.MarkdownxField(blank=True, help_text='Description of the degree or period of education.'),
        ),
        migrations.AlterField(
            model_name='education',
            name='end',
            field=models.DateField(blank=True, help_text='End of a period of education/degree program.', null=True),
        ),
        migrations.AlterField(
            model_name='education',
            name='institution',
            field=models.ForeignKey(help_text='Credential-granting institution.', on_delete=django.db.models.deletion.CASCADE, to='blog.institution'),
        ),
        migrations.AlterField(
            model_name='education',
            name='show',
            field=models.BooleanField(default=True, help_text='Show this period of education on the front-end?'),
        ),
        migrations.AlterField(
            model_name='education',
            name='start',
            field=models.DateField(help_text='Start of a period of education/degree program.'),
        ),
        migrations.AlterField(
            model_name='education',
            name='terminal',
            field=models.BooleanField(default=False, help_text='Is this the last degree obtained by a person?'),
        ),
        migrations.AlterField(
            model_name='event',
            name='banner',
            field=models.ImageField(blank=True, help_text='Event banner image.', null=True, upload_to='events/banners/%Y/%m/%d'),
        ),
        migrations.AlterField(
            model_name='event',
            name='cancel',
            field=models.BooleanField(default=False, help_text='Check this box if the event is canceled.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='day',
            field=models.DateField(help_text='On what day does the event take place?'),
        ),
        migrations.AlterField(
            model_name='event',
            name='desc',
            field=markdownx.models.MarkdownxField(help_text='Describe the event (markdown-enabled).'),
        ),
        migrations.AlterField(
            model_name='event',
            name='end',
            field=models.TimeField(help_text='Provide end time.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='host',
            field=models.ManyToManyField(blank=True, help_text='What is the hosting institution?', to='blog.Institution'),
        ),
        migrations.AlterField(
            model_name='event',
            name='participant',
            field=models.ManyToManyField(help_text='Associate individual participants with the event by their role.', through='blog.Role', to='blog.Person'),
        ),
        migrations.AlterField(
            model_name='event',
            name='start',
            field=models.TimeField(help_text='Provide start time.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='title',
            field=models.CharField(help_text="What is the event's title?", max_length=100),
        ),
        migrations.AlterField(
            model_name='event',
            name='virtual_url',
            field=models.URLField(blank=True, default='', help_text='What is the URL of the virtual event (if this applies...)'),
        ),
        migrations.AlterField(
            model_name='event',
            name='website',
            field=models.URLField(blank=True, default='', help_text='Provide a link to the event website.'),
        ),
        migrations.AlterField(
            model_name='institution',
            name='address',
            field=models.CharField(blank=True, default='', help_text='Address of the institution.', max_length=200),
        ),
        migrations.AlterField(
            model_name='institution',
            name='city',
            field=models.CharField(help_text='City in which institution is located.', max_length=100),
        ),
        migrations.AlterField(
            model_name='institution',
            name='country',
            field=models.CharField(help_text='Country in which institution is located.', max_length=100),
        ),
        migrations.AlterField(
            model_name='institution',
            name='location',
            field=django.contrib.gis.db.models.fields.PointField(help_text='Approximate location of institution.', srid=4326),
        ),
        migrations.AlterField(
            model_name='institution',
            name='parent',
            field=models.ForeignKey(blank=True, help_text="Parent institution of institution (E.g., 'MIT' is the parent of 'DUSP').", null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.institution'),
        ),
        migrations.AlterField(
            model_name='institution',
            name='postal',
            field=models.CharField(help_text='Postcode in which institution is located.', max_length=20),
        ),
        migrations.AlterField(
            model_name='institution',
            name='room',
            field=models.CharField(blank=True, default='', help_text='Room at which the institution can be reached.', max_length=20),
        ),
        migrations.AlterField(
            model_name='institution',
            name='state',
            field=models.CharField(help_text='State in which institution is located.', max_length=100),
        ),
        migrations.AlterField(
            model_name='institution',
            name='website',
            field=models.URLField(blank=True, default='', help_text="Institution's website."),
        ),
        migrations.AlterField(
            model_name='person',
            name='affil',
            field=models.ManyToManyField(help_text="List of person's current and historical affiliations.", through='blog.Affiliation', to='blog.Institution'),
        ),
        migrations.AlterField(
            model_name='person',
            name='cred',
            field=models.CharField(blank=True, choices=[('MCP', 'M. City Planning'), ('PhD', 'Ph.D.'), ('MUP', 'M. Urban Planning'), ('MURP', 'M. Urban and Regional Planning'), ('MFA', 'M. Fine Arts'), ('MLA', 'M. Landscape Architecture'), ('MArch', 'M. Architecture'), ('MBA', 'M. Business Administration'), ('MPA', 'M. Public Administration'), ('MDes', 'M. Design Studies'), ('DDes', 'D.Des.'), ('', 'None')], default='', help_text='Display credential.', max_length=5),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, default='', help_text='Personal email. Useful in the absence\n        of an affiliated email.', max_length=254),
        ),
        migrations.AlterField(
            model_name='person',
            name='first',
            field=models.CharField(help_text="Person's given name.", max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='github',
            field=models.CharField(blank=True, default='', help_text="Person's Github handle.", max_length=25),
        ),
        migrations.AlterField(
            model_name='person',
            name='gitlab',
            field=models.CharField(blank=True, default='', help_text="Person's Gitlab handle.", max_length=25),
        ),
        migrations.AlterField(
            model_name='person',
            name='last',
            field=models.CharField(help_text="Person's last name(s).", max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='linkedin',
            field=models.CharField(blank=True, default='', help_text="Person's LinkedIn handle.", max_length=25),
        ),
        migrations.AlterField(
            model_name='person',
            name='middle',
            field=models.CharField(blank=True, default='', help_text="Person's middle name(s).", max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='orcid',
            field=models.CharField(blank=True, help_text="Person's ORCID.", max_length=19),
        ),
        migrations.AlterField(
            model_name='person',
            name='page',
            field=models.BooleanField(default=False, help_text='Does this person have their own detail page?'),
        ),
        migrations.AlterField(
            model_name='person',
            name='pgp',
            field=models.CharField(blank=True, help_text="Person's PGP key.", max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='photo',
            field=models.ImageField(blank=True, help_text='Photo/headshot.', null=True, upload_to='authors/images/%Y/%m/%d'),
        ),
        migrations.AlterField(
            model_name='person',
            name='pronouns',
            field=models.CharField(choices=[('M', 'He/him/his'), ('W', 'She/her/hers'), ('N', 'He/him/his or They/them/theirs'), ('H', 'She/her/hers or They/them/theirs'), ('T', 'They/them/theirs')], default='T', help_text='Preferred pronouns.', max_length=1),
        ),
        migrations.AlterField(
            model_name='person',
            name='twitter',
            field=models.CharField(blank=True, help_text="Person's Twitter handle.", max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='vita',
            field=models.FileField(blank=True, default='', help_text='Current curriculum vita.', upload_to='authors/vitae/'),
        ),
        migrations.AlterField(
            model_name='person',
            name='website',
            field=models.URLField(blank=True, default='', help_text="Person's personal website (independent their affiliations)."),
        ),
        migrations.AlterField(
            model_name='person',
            name='zotero',
            field=models.CharField(blank=True, default='', help_text="Person's Zotero handle.", max_length=25),
        ),
        migrations.AlterField(
            model_name='post',
            name='attach',
            field=models.FileField(blank=True, default='', help_text='Attachment to this blog post.', upload_to='attachments/'),
        ),
        migrations.AlterField(
            model_name='post',
            name='attach_kind',
            field=models.CharField(help_text='What kind of thing is the attachment? E.g., syllabus, article).', max_length=150),
        ),
        migrations.AlterField(
            model_name='post',
            name='authors',
            field=models.ManyToManyField(help_text='Authors of this post.', to='blog.Person'),
        ),
        migrations.AlterField(
            model_name='post',
            name='banner',
            field=models.ImageField(help_text='Image to be displayed across the detail. Best if wide.', null=True, upload_to='posts/banners/%Y/%m/%d'),
        ),
        migrations.AlterField(
            model_name='post',
            name='bib',
            field=models.FileField(blank=True, help_text='Bibliography file. Formatted in BetterBibLaTex.', upload_to='bibs/'),
        ),
        migrations.AlterField(
            model_name='post',
            name='content_type',
            field=models.ForeignKey(blank=True, help_text='This is one of the fields necessary for GenericForeignKey\n             (content_object) to other arbitrary objects.', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AlterField(
            model_name='post',
            name='display_datetime',
            field=models.DateTimeField(help_text='Datetime that should be displayed for the post.'),
        ),
        migrations.AlterField(
            model_name='post',
            name='object_id',
            field=models.PositiveIntegerField(blank=True, help_text='Unique identifier for arbitrary table.', null=True),
        ),
        migrations.AlterField(
            model_name='role',
            name='event',
            field=models.ForeignKey(help_text='Event in which a person is participating.', on_delete=django.db.models.deletion.CASCADE, to='blog.event'),
        ),
        migrations.AlterField(
            model_name='role',
            name='participant',
            field=models.ForeignKey(help_text='Person participating in a given event.', on_delete=django.db.models.deletion.CASCADE, to='blog.person'),
        ),
        migrations.AlterField(
            model_name='role',
            name='role',
            field=models.CharField(choices=[('D', 'Discussant'), ('M', 'Moderator'), ('P', 'Panelist'), ('R', 'Presenter'), ('I', 'Introducer'), ('W', 'Workshop Leader')], default='L', help_text="What is the person's role in the event?", max_length=1),
        ),
        migrations.AlterField(
            model_name='sitewidesetting',
            name='csl',
            field=models.ForeignKey(blank=True, help_text='Choose a Citation Style Language (CSL)', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.citationstyle'),
        ),
        migrations.AlterField(
            model_name='sitewidesetting',
            name='main_person',
            field=models.ForeignKey(blank=True, help_text='Which person is the focus of this site?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.person'),
        ),
    ]
